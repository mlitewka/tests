apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spodseccomppolicy
  annotations:
    description: >-
      The RuntimeDefault seccomp profile should be enabled
spec:
  crd:
    spec:
      names:
        kind: K8sPodSeccompPolicy
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          properties:
            allowedProfiles:
              type: array
              description: "An array of allowed profile values for seccomp annotations on Pods."
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spodseccomppolicy

        violation[{"msg": msg}] {
          o := input_object[_]
          m := o.metadata
          c := input_containers(o)[_]
          not input_container_allowed(m, c)
          msg := sprintf("The RuntimeDefault seccomp profile should be enabled, pod: %v, container: %v", [m.name, c.name])
        }

        input_container_allowed(metadata, container) {
            not get_container_profile(metadata, container)
            metadata.annotations["seccomp.security.alpha.kubernetes.io/pod"] == input.parameters.allowedProfiles[_]
        }

        input_container_allowed(metadata, container) {
          profile := get_container_profile(metadata, container)
          profile == input.parameters.allowedProfiles[_]
        }

        get_container_profile(metadata, container) = profile {
          value := metadata.annotations[key]
          startswith(key, "container.seccomp.security.alpha.kubernetes.io/")
          [prefix, name] := split(key, "/")
          name == container.name
          profile = value
        }

        input_object[o] {
          input.review.object.kind == "Pod"
          o := input.review.object
        }

        input_object[o] {
          input.review.object.kind == "CronJob"
          o := input.review.object.spec.jobTemplate.spec.template
        }

        input_object[o] {
          o := input.review.object.spec.template
        }

        input_containers(o) = c {
          c := o.spec.containers
        }

        input_containers(o) = c {
          c := o.spec.initContainers
        }
